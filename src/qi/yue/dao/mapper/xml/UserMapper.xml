<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="qi.yue.dao.mapper.UserMapper">
	<resultMap id="BaseResultMap" type="qi.yue.dto.UserDto">
		<id column="id" property="uid" jdbcType="INTEGER" />
		<result column="username" property="username" jdbcType="VARCHAR" />
		<result column="password" property="password" jdbcType="VARCHAR" />
		<result column="sex" property="sex" jdbcType="INTEGER" />
		<result column="school" property="school" jdbcType="VARCHAR" />
		<result column="phonenumber" property="phonenumber" jdbcType="VARCHAR" />
		<result column="updated_at" property="updated_at" jdbcType="TIMESTAMP" />
		<result column="follower" property="follower" jdbcType="INTEGER" />
		<result column="token" property="token" jdbcType="VARCHAR" />
		<result column="hometown" property="hometown" jdbcType="VARCHAR" />
		<result column="face_url" property="face_url" jdbcType="VARCHAR" />
		<result column="signature" property="signature" jdbcType="VARCHAR" />
		<result column="location" property="location" jdbcType="VARCHAR" />
		<result column="created_at" property="created_at" jdbcType="TIMESTAMP" />
		<result column="birthday" property="birthday" jdbcType="TIMESTAMP" />
		<result column="following" property="following" jdbcType="INTEGER" />
		<result column="career" property="career" jdbcType="VARCHAR" />
		<result column="nickname" property="nickname" jdbcType="VARCHAR" />
	</resultMap>

	<sql id="Base_Column_List">
		id, username, password, sex, school, phonenumber,
		updated_at, follower,
		token, hometown,
		face_url, signature, location,
		created_at, birthday, following, career,
		nickname
	</sql>
	<select id="find" resultMap="BaseResultMap" parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from t_user
		where id = #{id,jdbcType=INTEGER}
	</select>
	<select id="findByUsernameAndPassword" resultMap="BaseResultMap"
		parameterType="map">
		select
		<include refid="Base_Column_List" />
		from t_user
		where username=#{username,jdbcType=VARCHAR} and
		password=#{password,jdbcType=VARCHAR}
	</select>

	<select id="findByUidAndToken" resultMap="BaseResultMap"
		parameterType="map">
		select
		<include refid="Base_Column_List" />
		from t_user
		where id = #{id,jdbcType=INTEGER} and
		token=#{token,jdbcType=VARCHAR}
	</select>

	<select id="findByUsername" resultMap="BaseResultMap"
		parameterType="java.lang.String">
		select
		<include refid="Base_Column_List" />
		from t_user
		where username=#{username,jdbcType=VARCHAR}
	</select>

	<insert id="insert" parameterType="qi.yue.entity.User"
		useGeneratedKeys="true" keyProperty="id">
		insert into t_user (
		username,
		password,
		sex, school, phonenumber,
		updated_at, follower,
		token,
		hometown, face_url, signature,
		location, created_at, birthday,
		following, career, nickname
		)
		values (
		#{username,jdbcType=VARCHAR},
		#{password,jdbcType=VARCHAR},
		#{sex,jdbcType=INTEGER},
		#{school,jdbcType=VARCHAR},
		#{phonenumber,jdbcType=VARCHAR},
		#{updatedAt,jdbcType=TIMESTAMP},
		#{follower,jdbcType=INTEGER},
		#{token,jdbcType=VARCHAR},
		#{hometown,jdbcType=VARCHAR},
		#{faceUrl,jdbcType=VARCHAR},
		#{signature,jdbcType=VARCHAR},
		#{location,jdbcType=VARCHAR},
		#{createdAt,jdbcType=TIMESTAMP},
		#{birthday,jdbcType=TIMESTAMP},
		#{following,jdbcType=INTEGER},
		#{career,jdbcType=VARCHAR},
		#{nickname,jdbcType=VARCHAR}
		)
	</insert>

	<update id="update" parameterType="qi.yue.entity.User">
		update t_user
		<set>
			<if test="username != null">
				username = #{username,jdbcType=VARCHAR},
			</if>
			<if test="password != null">
				password = #{password,jdbcType=VARCHAR},
			</if>
			<if test="sex != null">
				sex = #{sex,jdbcType=INTEGER},
			</if>
			<if test="school != null">
				school = #{school,jdbcType=VARCHAR},
			</if>
			<if test="phonenumber != null">
				phonenumber = #{phonenumber,jdbcType=VARCHAR},
			</if>
			<if test="updatedAt != null">
				updated_at = #{updatedAt,jdbcType=TIMESTAMP},
			</if>
			<if test="follower != null">
				follower = #{follower,jdbcType=INTEGER},
			</if>
			<if test="token != null">
				token = #{token,jdbcType=VARCHAR},
			</if>
			<if test="hometown != null">
				hometown = #{hometown,jdbcType=VARCHAR},
			</if>
			<if test="faceUrl != null">
				face_url = #{faceUrl,jdbcType=VARCHAR},
			</if>
			<if test="signature != null">
				signature = #{signature,jdbcType=VARCHAR},
			</if>
			<if test="location != null">
				location = #{location,jdbcType=VARCHAR},
			</if>
			<if test="createdAt != null">
				created_at = #{createdAt,jdbcType=TIMESTAMP},
			</if>
			<if test="birthday != null">
				birthday = #{birthday,jdbcType=TIMESTAMP},
			</if>
			<if test="following != null">
				following = #{following,jdbcType=INTEGER},
			</if>
			<if test="career != null">
				career = #{career,jdbcType=VARCHAR},
			</if>
			<if test="nickname != null">
				nickname = #{nickname,jdbcType=VARCHAR},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>

	<update id="updateTokenById" parameterType="map">
		update t_user
		<set>
			<if test="token != null">
				token = #{token,jdbcType=VARCHAR},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>

	<update id="updatePasswordByUsernamae" parameterType="map">
		update t_user
		<set>
			<if test="password != null">
				password = #{password,jdbcType=VARCHAR},
			</if>
		</set>
		where username = #{username,jdbcType=INTEGER}
	</update>

</mapper>