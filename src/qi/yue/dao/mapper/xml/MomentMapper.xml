<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="qi.yue.dao.mapper.MomentMapper">
	<resultMap id="BaseResultMap" type="qi.yue.dto.MomentDTO">
		<id column="id" jdbcType="INTEGER" property="mid" />
		<result column="user_id" jdbcType="INTEGER" property="uid" />
		<result column="type" jdbcType="INTEGER" property="type" />
		<result column="cover" jdbcType="VARCHAR" property="cover" />
		<result column="video" jdbcType="VARCHAR" property="video" />
		<result column="latitude" property="latitude" jdbcType="DECIMAL" />
		<result column="longitude" property="longitude" jdbcType="DECIMAL" />
		<result column="distance" property="distance" jdbcType="DECIMAL" />
		<result column="created_at" jdbcType="TIMESTAMP" property="created_at" />
		<result column="updated_at" jdbcType="TIMESTAMP" property="updated_at" />
		<result column="moment_location" jdbcType="VARCHAR" property="moment_location" />

		<result column="msg" jdbcType="LONGVARCHAR" property="msg" />
		<result column="thumbs" jdbcType="LONGVARCHAR" property="thumbs" />
		<result column="pictures" jdbcType="LONGVARCHAR" property="pictureString" />
		<collection property="comment" ofType="qi.yue.dto.CommentDTO">
			<id column="c_id" jdbcType="INTEGER" property="comment_id" />
			<result column="c_user_id" jdbcType="INTEGER" property="uid" />
			<result column="c_username" jdbcType="VARCHAR" property="username" />
			<result column="c_moment_id" jdbcType="INTEGER" property="mid" />
			<result column="c_face_url" jdbcType="VARCHAR" property="face_url" />
			<result column="c_reply_uid" jdbcType="INTEGER" property="reply_uid" />
			<result column="c_reply_username" jdbcType="VARCHAR" property="reply_username" />
			<result column="c_created_at" jdbcType="TIMESTAMP" property="created_at" />
			<result column="c_updated_at" jdbcType="TIMESTAMP" property="updated_at" />
			<result column="c_msg" property="msg" jdbcType="LONGVARCHAR" />
		</collection>
		<collection property="thumbs_up" ofType="qi.yue.dto.ThumbsUpDTO">
			<id column="t_id" property="thumbs_up_id" jdbcType="INTEGER" />
			<result column="t_user_id" property="uid" jdbcType="INTEGER" />
			<result column="t_moment_id" property="mid" jdbcType="INTEGER" />
			<result column="t_username" property="username" jdbcType="VARCHAR" />
			<result column="t_created_at" property="created_at" jdbcType="TIMESTAMP" />
			<result column="t_updated_at" property="updated_at" jdbcType="TIMESTAMP" />
		</collection>
	</resultMap>

	<resultMap id="UserResultMap" type="qi.yue.dto.MomentDTO"
		extends="BaseResultMap">
		<association property="user" javaType="qi.yue.dto.SimplifyUserDTO">
			<id column="u_id" property="uid" jdbcType="INTEGER" />
			<result column="u_username" property="username" jdbcType="VARCHAR" />
			<result column="u_sex" property="sex" jdbcType="INTEGER" />
			<result column="u_face_url" property="face_url" jdbcType="VARCHAR" />
		</association>
	</resultMap>

	<sql id="Base_Column_List">
		id, user_id, type, cover, video, latitude, longitude,
		created_at,
		updated_at, msg, thumbs, pictures, moment_location
	</sql>

	<sql id="User_Column">
		user.id as u_id, user.sex as u_sex,
		user.face_url as
		u_face_url, user.username as u_username
	</sql>

	<sql id="Moment_Column">
		moment.id, moment.user_id, moment.type, moment.cover,
		moment.video, moment.created_at, moment.updated_at,
		moment.msg,
		moment.thumbs, moment.pictures,
		moment.latitude,moment.longitude,moment.moment_location
	</sql>

	<sql id="Comment_Column">
		comment.id as c_id, comment.user_id as c_user_id,
		comment.username as c_username,
		comment.moment_id as c_moment_id,
		comment.face_url as c_face_url,comment.reply_uid as
		c_reply_uid,comment.reply_username as c_reply_username,
		comment.created_at as c_created_at,
		comment.updated_at as c_updated_at,
		comment.msg as c_msg
	</sql>

	<sql id="Thumbs_Up_Column">
		thumbs_up.id as t_id, thumbs_up.user_id as t_user_id,
		thumbs_up.username as t_username,
		thumbs_up.moment_id as t_moment_id,
		thumbs_up.created_at as t_created_at, thumbs_up.updated_at as
		t_updated_at
	</sql>
	<select id="findNearMap" parameterType="map" resultMap="BaseResultMap">
		select
		<include refid="Moment_Column" />
		,
		ROUND(
		6378.138 * 2 * ASIN(
		SQRT(
		POW(
		SIN(
		(
		#{latitude,jdbcType=DECIMAL}
		*
		PI() / 180 - moment.latitude * PI() / 180
		) / 2
		),
		2
		) +
		COS(#{latitude,jdbcType=DECIMAL}* PI() / 180) * COS( moment.latitude*
		PI() / 180) * POW(
		SIN(
		(
		#{longitude,jdbcType=DECIMAL} * PI() / 180 -
		moment.longitude * PI() / 180
		) / 2
		),
		2
		)
		)
		) * 1000
		) AS
		distance
		from
		t_moment moment
		where moment.longitude &gt; #{minLat}
		and
		moment.longitude
		&lt;
		#{maxLat}
		and
		moment.latitude &gt; #{minLng} and
		moment.latitude &lt;
		#{maxLng}
		order
		by
		created_at desc
	</select>


	<select id="findUserMap" parameterType="java.lang.Integer"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />

		from
		t_moment
		where
		user_id=#{userId,jdbcType=INTEGER}
		order
		by
		created_at
		desc
	</select>
	<select id="find" parameterType="java.lang.Integer" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from t_moment
		where id = #{id,jdbcType=INTEGER} order by created_at
	</select>

	<select id="findByUserId" parameterType="java.lang.Integer"
		resultMap="BaseResultMap">
		select
		<include refid="Moment_Column" />
		,
		<include refid="Comment_Column" />
		,
		<include refid="Thumbs_Up_Column" />

		from t_moment moment left join t_comment comment on
		comment.moment_id=moment.id
		left join t_thumbs_up thumbs_up on
		thumbs_up.moment_id=moment.id
		where
		moment.user_id
		=#{userId,jdbcType=INTEGER} order by created_at desc
	</select>

	<select id="findByPage" parameterType="qi.yue.dto.PageDTO"
		resultMap="BaseResultMap">
		select
		<include refid="Moment_Column" />
		,
		<include refid="Comment_Column" />
		,
		<include refid="Thumbs_Up_Column" />
		,
		ROUND(
		6378.138 * 2 * ASIN(
		SQRT(
		POW(
		SIN(
		(
		#{latitude,jdbcType=DECIMAL}
		* PI() / 180 - moment.latitude * PI() / 180
		) / 2
		),
		2
		) +
		COS(#{latitude,jdbcType=DECIMAL}* PI() / 180) * COS( moment.latitude*
		PI() / 180) * POW(
		SIN(
		(
		#{longitude,jdbcType=DECIMAL} * PI() / 180 -
		moment.longitude * PI() / 180
		) / 2
		),
		2
		)
		)
		) * 1000
		) AS
		distance

		from
		t_moment moment left join t_comment comment on
		comment.moment_id=moment.id
		left join t_thumbs_up thumbs_up on
		thumbs_up.moment_id=moment.id
		where
		moment.user_id
		=#{id,jdbcType=INTEGER}
		limit
		#{currentNumber,jdbcType=INTEGER},#{size,jdbcType=INTEGER}
	</select>

	<select id="findUserMoment" parameterType="qi.yue.dto.PageDTO"
		resultMap="UserResultMap">
		select
		<include refid="Moment_Column" />
		,
		<include refid="User_Column" />
		,
		ROUND(
		6378.138 * 2 * ASIN(
		SQRT(
		POW(
		SIN(
		(
		#{latitude,jdbcType=DECIMAL}
		* PI() /
		180 - moment.latitude * PI() / 180
		) / 2
		),
		2
		) +
		COS(#{latitude,jdbcType=DECIMAL}* PI() / 180) * COS( moment.latitude*
		PI() / 180) * POW(
		SIN(
		(
		#{longitude,jdbcType=DECIMAL} * PI() / 180 -
		moment.longitude * PI() / 180
		) / 2
		),
		2
		)
		)
		) * 1000
		) AS
		distance

		from
		t_moment moment left join t_user user
		on
		user.id=moment.user_id
		where
		moment.user_id
		=#{user_id,jdbcType=INTEGER}
		order
		by
		moment.created_at
		desc
		limit
		#{currentNumber,jdbcType=INTEGER},#{size,jdbcType=INTEGER}
	</select>

	<select id="findFollowingsMoment" parameterType="map" resultMap="UserResultMap">
		select
		<include refid="Moment_Column" />
		,
		<include refid="User_Column" />
		,
		<!-- <include refid="Comment_Column" /> -->
		<!-- , -->
		<!-- <include refid="Thumbs_Up_Column" /> -->
		<!-- , -->
		ROUND(
		6378.138 * 2 * ASIN(
		SQRT(
		POW(
		SIN(
		(
		#{latitude,jdbcType=DECIMAL}
		*
		PI() / 180 - moment.latitude * PI() / 180
		) / 2
		),
		2
		) +
		COS(#{latitude,jdbcType=DECIMAL}* PI() / 180) * COS( moment.latitude*
		PI() / 180) * POW(
		SIN(
		(
		#{longitude,jdbcType=DECIMAL} * PI() / 180 -
		moment.longitude * PI() / 180
		) / 2
		),
		2
		)
		)
		) * 1000
		) AS
		distance

		from
		t_moment
		moment left join t_user user
		on
		user.id=moment.user_id
		<!-- left join -->
		<!-- t_comment comment on -->
		<!-- comment.moment_id=moment.id -->
		<!-- left join -->
		<!-- t_thumbs_up -->
		<!-- thumbs_up on -->
		<!-- thumbs_up.moment_id=moment.id -->
		where
		moment.user_id
		in (select
		tid from
		t_follow where
		t_follow.fid=#{fid,jdbcType=INTEGER})

		order
		by
		moment.created_at desc
		limit
		#{currentNumber,jdbcType=INTEGER},#{size,jdbcType=INTEGER}
	</select>

	<select id="findNearbyMoment" parameterType="map" resultMap="UserResultMap">
		select
		<include refid="Moment_Column" />
		,
		<include refid="User_Column" />
		<!-- , -->
		<!-- <include refid="Comment_Column" /> -->
		<!-- , -->
		<!-- <include refid="Thumbs_Up_Column" /> -->
		,
		ROUND(
		6378.138 * 2 * ASIN(
		SQRT(
		POW(
		SIN(
		(
		#{latitude,jdbcType=DECIMAL}
		* PI() / 180 - moment.latitude * PI() / 180
		) / 2
		),
		2
		) +
		COS(#{latitude,jdbcType=DECIMAL}* PI() / 180) * COS( moment.latitude*
		PI() / 180) * POW(
		SIN(
		(
		#{longitude,jdbcType=DECIMAL} * PI() / 180 -
		moment.longitude * PI() / 180
		) / 2
		),
		2
		)
		)
		) * 1000
		) AS
		distance

		from
		t_moment
		moment left join t_user user
		on
		user.id=moment.user_id
		<!-- left join -->
		<!-- t_comment comment on -->
		<!-- comment.moment_id=moment.id -->
		<!-- left join -->
		<!-- t_thumbs_up -->
		<!-- thumbs_up on -->
		<!-- thumbs_up.moment_id=moment.id -->
		<!-- where -->
		<!-- moment.user_id -->
		<!-- in (select -->
		<!-- tid from -->
		<!-- t_following where -->
		<!-- t_following.fid=#{fid,jdbcType=INTEGER}) -->
		order
		by
		moment.created_at desc
		limit
		#{currentNumber,jdbcType=INTEGER},#{size,jdbcType=INTEGER}
	</select>

	<delete id="delete" parameterType="java.lang.Integer">
		delete from
		t_moment
		where id =
		#{id,jdbcType=INTEGER}
	</delete>

	<insert id="insert" parameterType="qi.yue.entity.Moment"
		useGeneratedKeys="true" keyProperty="id">
		insert into t_moment (
		<include refid="Base_Column_List" />
		)
		values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER},
		#{type,jdbcType=INTEGER},
		#{cover,jdbcType=VARCHAR},
		#{video,jdbcType=VARCHAR}, #{latitude,jdbcType=DECIMAL},
		#{longitude,jdbcType=DECIMAL}, #{createdAt,jdbcType=TIMESTAMP},
		#{updatedAt,jdbcType=TIMESTAMP},
		#{msg,jdbcType=LONGVARCHAR},
		#{thumbs,jdbcType=LONGVARCHAR},
		#{pictures,jdbcType=LONGVARCHAR},#{moment_location,jdbcType=VARCHAR}
		)
	</insert>

</mapper>